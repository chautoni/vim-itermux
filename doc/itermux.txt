*itermux.txt*  Turbo Ruby tests with iTerm

Author:  Stefano Verna <http://welaika.com/>
License: Same terms as Vim itself (see |license|)

This plugin is only available if 'compatible' is not set.

This plugin optionally depends rails.vim.

INTRODUCTION                                    *itermux*

iTermux is designed to speed up your TDD cycle by using a single key
mapping to run the most relevant test based on the current file in vim.
It uses iTerm2's scriptability to send commands to a chosen session in your
iTerm window.

The default mapping for invoking the plugin is <leader>t. In a spec
file, this will run "rspec <filename>". In a test-unit file, this will
run "ruby -Itest <filename>". In a cucumber feature file, this will run
"cucumber <filename>".

If rails.vim is present, some additional niceties are provided. When
rails.vim can find an alternate file for the current one, and that file
is a spec or test, it will run the alternate file rather than the one
you are in. For example, given the following two files:
>
        app/models/foo.rb
        spec/models/foo_bar.rb
<
When the current file and is "foo.rb" and you invoke the plugin, the
following command will be sent the configured iTerm pane:
>
        rspec spec/models/foo_bar.rb
<
Note: this plugin does not work well with |autochdir|. The working
directories for the target pane and vim should match.


REPEATING                                        *itermux-repeating*

If you invoke the plugin (by default, with <leader>t), and neither the
current file nor the alternate is a test, spec or feature, itermux will
simply send the most recent command instead. This can be quite helpful
in situations where you are editing a related file, or in the case of
cucumber, step definitions or a view.

The |itermux| and |itermux-focused| invocations each store their own
command, so you can use the focused one elsewhere in a test suite while
still setting the normal one, or vice-versa.


FOCUSED                                          *itermux-focused*

iTermux also comes with bindings to run focused tests. This is
accomplished by appending the current line number to the test command.
In cucumber, this runs the scenario under the cursor. In rspec, this
runs only the example or group under the cursor.

The default mapping for focused test output is <leader>T.


MAPPING                                         *itermux-mappings*

<Plug>SendTestToiTerm              Normal invocation
<Plug>SendFocusedTestToiTerm       Focused test (appends line number)

And the following are available unless "g:no_itermux_mappings" is set:

<leader>t                         Normal invocation
<leader>T                         Focused test (appends line number)

 vim:tw=78:et:ft=help:norl:
